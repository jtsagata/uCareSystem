#!/bin/bash
#
#    ucaresystem - All-in-one system update and maintenance tool
#    Copyright:
#       2009 Salih Emin <salih@utappia.org>
#       2020 Ioannis Tsagatakis <tsagatakis@protonmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu
UCARE_VERSION="4.5.0"
lib_dir="."
base_dir=$(dirname "$0")

source "${base_dir}"/base

trap trap_handler 1 2 3 6
function trap_handler() {
  { set +x; } 2>/dev/null
  header_text "Program interrupt."
  echo "  The program have stop before finished. Your system maybe in an incomplete state."
  echo "  You may need to do:"
  echo "     sudo apt update && sudo apt install -f"
  exit 1
}

function welcome_screen() {
  clear
  echo "_______________________________________________________"
  echo "                                                       "
  echo "            ${GREEN}uCareSystem Core ${UCARE_VERSION}${NORMAL}            "
  echo "            ${GREEN}~~~~~~~~~~~~~~~~~~~~~~~${NORMAL}                      "
  echo "                                                       "
  echo " Welcome to all-in-one System Update and maintenance   "
  echo " assistant tool.                                        "
  echo "                                                       "
  echo "                                                       "
  echo " This simple script will automatically         	     "
  echo " refresh your packagelist, download and                "
  echo " install updates (if there are any), remove any old    "
  echo " kernels, obsolete packages and configuration files    "
  echo " to free up disk space, without any need of user       "
  echo " interference                                         "
  echo "                   				                     "
  echo " If youâ€™ve found it useful and saved you time and you  "
  echo " think it is worth of your support, you can make a     "
  echo " donation via PayPal by clicking on the following:     "
  echo "                                                       "
  echo "           ${GREEN}https://www.paypal.me/cerebrux${NORMAL}              "
  echo "_______________________________________________________"
  echo

  if [ "${ASK_CONFIRM}" == "true" ]; then
    ask_yesno "Are you sure ?" resp
    if [[ "${resp}" == "no" ]]; then
      exit 1
    fi
  fi
}

function action_upgrade_EOL() {
  check_root_priv
  curr_date=$(date +%F_%T)

  new_codename=$(/usr/bin/ubuntu-distro-info --supported | tail -1)

  header_text "Upgrade to EOL"
  ${EXEC} "/etc/apt/sources.list" "/etc/apt/sources.eol_${curr_date}"
  if [ "$EXEC" == "echo" ]; then
    echo "...skiping updating /etc/apt/sources.list"
  else
    header_text "Updating /etc/apt/sources.list"
    cat <<EOT >/etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $new_codename main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $new_codename-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $new_codename-security main restricted universe multiverse

EOT
  fi

  ${EXEC} ${SUDO} ${APT} install update-manager-core
  ${EXEC} ${SUDO} ${APT} -y dist-upgrade
  ${EXEC} ${SUDO} ${UPDATE_TOOL}
  header_text "Done upgrade to EOL"
}

function action_upgrade() {
  distribution_id=$(${LSB_RELEASE} --id | cut -f2)
  codename=$(${LSB_RELEASE} --codename | cut -f2)

  case "${distribution_id}" in
  "Debian") do_debian_upgade "$1" ;;
  "Ubuntu") do_ubuntu_upgade "$1" ;;
  "LinuxMint")
    echo "Linux Mint is unsupported. Please use the distro tool"
    exit
    ;;
  *)
    echo "Your distribution '${distribution_id}' is unsupported. Please do a pull request."
    exit
    ;;
  esac

}

function do_ubuntu_upgrade() {
  action="$1"
  # Always ask
  ask_yesno "Are you sure ?"
  if [[ "${response}" == "no" ]]; then
    exit 1
  fi

  case "$action" in
  "next")
    action_timeshift
    action_upgrade_next
    ;;
  "development")
    action_timeshift
    action_upgrade_devel
    ;;
  "eol")
    action_timeshift
    action_upgrade_EOL
    ;;
  *)
    echo "Error: unknown upgrade tag '$action'"
    ;;
  esac
}

function do_debian_upgrade() {
  # TODO: Allow to set codename, test if given is newest
  # TODO: Check if it is safe? (try to see if repo exist for PPAs etc.."

  check_root_priv
  curr_date=$(date +%F_%T)

  codename=$(${LSB_RELEASE} --codename | cut -f2)
  new_codename=$(debian-distro-info --supported | tail -1)

  action_timeshift
  action_maintain

  header_text "Upgrade to $new_codename from $codename"

  if [ "$EXEC" == "echo" ]; then
    echo "...skiping updating /etc/apt/sources.list"
  else
    header_text "Backup /etc/apt/sources.list"
    ${EXEC} cp "/etc/apt/sources.list" "/etc/apt/sources.${codename}_${curr_date}"
    for file in /etc/apt/sources.list.d/*; do
      ${EXEC} cp "$file" "${file}.${codename}_${curr_date}"
    done

    header_text "Updating /etc/apt/sources.list"
    ${EXEC} ${SUDO} ${SED} -i "s/${codename}/${new_codename}/g" /etc/apt/sources.list
    ${EXEC} ${SUDO} ${SED} -i "s/${codename}/${new_codename}/g" /etc/apt/sources.list.d/*.list
  fi

  action_maintain
  ${EXEC} ${SUDO} apt dist-upgrade -y

  header_text "Done upgrade to $new_codename from $codename"
}

function action_upgrade_next() {
  if [ -x ${UPDATE_TOOL} ]; then
    echo "Error missing ${UPDATE_TOOL}"
    exit 1
  fi

  check_root_priv
  header_text "Upgrade to next Release"
  ${EXEC} ${UPDATE_TOOL}
  header_text "Done upgrade to next Release"
}

function action_upgrade_devel() {
  if [ -x ${UPDATE_TOOL} ]; then
    echo "Error missing ${UPDATE_TOOL}"
    exit 1
  fi

  check_root_priv
  ${EXEC} ${UPDATE_TOOL} -d
  header_text "Done upgrade to next Release"
}


##
## The main process starts here
##

MODE="${DEFAULT_MODE}"
UPGRADE_MODE="next"
SHOW_BANNER=true
EXEC=""
DO_WAIT=false

ARGS=$(getopt -o hvdysmcwu: --long help,version,dryrun,yes,skip,maintain,clean,wait,upgrade: -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
  -d | --dryrun)
    EXEC="echo"
    shift
    ;;
  -y | --yes)
    ASK_CONFIRM=false
    shift
    ;;
  -s | --skip)
    SHOW_BANNER=false
    shift
    ;;
  -w | --wait)
    DO_WAIT=true
    shift
    ;;
  -m | --maintain)
    MODE=maintain
    shift
    ;;
  -c | --clean)
    MODE=clean
    shift
    ;;
  -u | --upgrade)
    MODE=upgrade
    UPGRADE_MODE="$2"
    shift
    shift
    ;;
  *) break ;;
  esac
done

# --help and --version is not our worries
# So must always check root privileges.
check_root_priv


if [ "$SHOW_BANNER" == true ]; then
  welcome_screen
else
  echo "${GREEN}ucaresystem${NORMAL}: All-in-one System Update and maintenance tool."
fi

case "$MODE" in
"maintain")
  source "${base_dir}"/task_check_eol
  source "${base_dir}"/task_maintain
  source "${base_dir}"/task_cleanup
  source "${base_dir}"/task_timeshift
  check_eol
  action_timeshift maintain
  action_maintain
  action_clean
  ;;
"clean")
  source "${base_dir}"/task_check_eol
  source "${base_dir}"/task_cleanup
  source "${base_dir}"/task_timeshift
  check_eol
  action_timeshift clean
  action_clean
  ;;
"upgrade")
  action_upgrade "${UPGRADE_MODE}"
  ;;
esac

check_reboot
header_text "Done"

if [ "$DO_WAIT" == true ]; then
  echo
  read -r -p "Press enter to close the window"
fi
