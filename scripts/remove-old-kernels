#!/bin/bash
#
#    remove-old-kernels - remove old kernel packages
#    Copyright (C) 2012 Dustin Kirkland <kirkland@ubuntu.com>
#                  2017 Esteban M. Navas Martín <algodelinux@gmail.com>
#
#    Authors: Dustin Kirkland <kirkland@ubuntu.com>
#             Kees Cook <kees@ubuntu.com>
#             Esteban M. Navas Martín <algodelinux@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

UCARE_VERSION="4.5.0"
lib_dir="."

function require() {
  source "$(dirname "$0")/${lib_dir}/$1"
}

require "base"

# NOTE: This script will ALWAYS keep the currently running kernel
# NOTE: Default is to keep 2 more, user overrides with --keep N, or change in the config file
KEEP_KERNELS=${KEEP_KERNELS:=2}

function action_help {
  echo "$(basename "${0}"): remove old kernels tool."
  echo "OPTIONS"
  echo "  -h|--help this help text"
  echo "  -k <n>|--keep=<n> keep <n> kernels"
  echo "Any unrecognized option will be passed straight through to apt-get"
  exit
}

APT_OPTS=
while [ ! -z "$1" ]; do
	case "$1" in
		-h | --help)
		action_help
		;;
		-k | --keep)
			# User specified the number of kernels to keep
			KEEP_KERNELS="$2"
			shift 2
		;;
		*)
			APT_OPTS="$APT_OPTS $1"
			shift 1
		;;
	esac
done

# Ensure we're running as root
if [ "$(id -u)" != 0 ]; then
	echo "ERROR: This script must run as root.  Hint..." 1>&2
	echo "  sudo $0 $@" 1>&2
	exit 1
fi

# Build our list of kernel packages to purge
if [ $(uname -r|grep pve) ]; then
   CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -${KEEP_KERNELS} | grep -v "$(uname -r)$" | cut -d- -f2- | awk '{print "pve-kernel-" $0 " pve-headers-" $0}' )
   REMOVED=$(dpkg -l| grep ^rc | awk '{print $2}' | grep -e pve-kernel -e pve-keaders)
else
   CANDIDATES=$(ls -tr /boot/vmlinuz-* | head -n -${KEEP_KERNELS} | grep -v "$(uname -r)$" | cut -d- -f2- | awk '{print "linux-image-" $0 " linux-headers-" $0}' )
   REMOVED=$(dpkg -l| grep ^rc | awk '{print $2}' | grep -e linux-image -e linux-keaders)
   OLD_HEADERS=$(dpkg -l|grep linux-headers | grep -v $(ls -tr /boot/vmlinuz-* | sed -e "s/^\/boot\/vmlinuz-/-e /" -e "s/-generic$//" | tr '\n' ' ') -e generic | awk '{print $2}')
fi

if [ -n "$REMOVED" ]; then
   # Purge old uninstalled kernels
   apt-get $APT_OPTS remove --purge $REMOVED
fi

if [ -n "$OLD_HEADERS" ]; then
   # Purge old headers
   apt-get $APT_OPTS remove --purge $OLD_HEADERS
fi

for c in $CANDIDATES; do
	dpkg-query -s "$c" >/dev/null 2>&1 && PURGE="$PURGE $c"
done

if [ -z "$PURGE" ]; then
	echo "No kernels are eligible for removal"
	exit 0
fi

# Purge old installed kernels
apt-get $APT_OPTS remove --purge $PURGE

