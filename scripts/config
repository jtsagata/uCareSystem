#!/usr/bin/env bash
#
#    ucaresystem - All-in-one system update and maintenance tool
#    Copyright:
#       2009 Salih Emin <salih@utappia.org>
#       2020 Ioannis Tsagatakis <tsagatakis@protonmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#TODO: Write config file


lib_dir=$(dirname "$0")
share_dir="$(dirname "$0")/../assets"

# shellcheck source=shflags
source "${lib_dir}/shflags"

## Ensure this file can only be sourced once
base_loaded=${base_loaded:-}
if [[ -n ${base_loaded} ]]; then
  echo "Warning: This file can only be sourced once"
  return 1
fi
base_loaded=true

# Set the version from Debian changelog
# The build system will replace this with the actual version
UCARE_VERSION="$(dpkg-parsechangelog -S Version)"

# Default program paths
declare -A EXECUTABLES
EXECUTABLES=(
  [SYSTEMD_INHIBIT]=/bin/systemd-inhibit:fixed
  [REBOOT]=/sbin/reboot:fixed
  [AWK]=/usr/bin/awk:fixed
  [SUDO]=/usr/bin/sudo:fixed
  [PS]=/bin/ps:fixed
  [XARGS]=/usr/bin/xargs:fixed
  [DATE]=/bin/date:fixed
  [APT_GET]=/usr/bin/apt-get:required
  [DEBORPHAN]=/usr/bin/deborphan:required
  [LSB_RELEASE]=/usr/bin/lsb_release:required
  [DISTRO_INFO]=/usr/bin/distro-info:required
  [UPDATE_TOOL]=/usr/bin/do-release-upgrade:optional
  [TIMESHIFT]=/usr/bin/timeshift:optional
  [TOPGRADE]="${HOME}/.cargo/bin/topgrade":optional
  [X_TERMINAL]=/usr/share/ucaresystem/xterm-launcher:optional
  [X_SUDO_RUNNER]=/usr/bin/pkexec:optional
)

# Default config_options
declare -A DEFAULT_VALUES
DEFAULT_VALUES=(
  [WAIT_ACTION]=0
  [KEEP_KERNELS]=2
  [DEFAULT_MODE]=maintain
  [AUTO_REBOOT]=false
  [AUTO_REBOOT_TIMEOUT]=10
  [ASK_CONFIRM]=true
  [ENABLE_TIMESHIFT]=auto
  [ENABLE_TOPGRADE]=false
  [CONFIG_FILE]=/etc/ucaresystem.conf
  [EXEC]=yes_opp
  [X_TERMINAL_OPTIONS]=""
  [BANNER_FILE]="${share_dir}/banner.txt"
  [BANNER_WAIT]=30
  [DISTRIBUTION_ID]="$(lsb_release --short --id)"
  [DISTRIBUTION_CODENAME]="$(lsb_release --codename --short)"
)

#
# Display a header text
#
function header_text() {
  echo -e "${GREEN}${BOLD}***${BOLDOFF} ${1}${NORMAL}"
}

#
# Ask for yes/no (localized)
# Usage ask_yesno prompt res variable
#
function ask_yesno() {
  local prompt=${1:-}
  local -n _ret=${2:-}
  local response=""

  while [[ -z $response ]]; do
    read -rp "${prompt} Yes/No? " yn
    case $yn in
    [Yy]*) response="yes" ;;
    [Nn]*) response="no" ;;
    *) echo "Again: ${prompt} Yes/No?" ;;
    esac
  done

  # shellcheck disable=SC2034
  _ret="$response"
}

#
# Check if reboot is type
#
function check_reboot() {
  # TODO: boxes message, show the contents of /var/run/reboot-type
  # Maybe make boxes a runtime depedency?
  header_text "Checking to see if a reboot is type  "
  ## Check to see if a reboot is type
  if [ -f /var/run/reboot-type ]; then
    echo
    echo "${BOLD}${RED}* * * * * * * * * * * * * * * * * *"
    echo "*                                 *"
    echo "* Consider rebooting your system  *"
    echo "* to finish applying updates      *"
    echo "*                                 *"
    echo "* * * * * * * * * * * * * * * * * *${BOLDOFF}${NORMAL}"
    echo
  fi

  if [ "$AUTO_REBOOT" == "true" ]; then
    header_text "Rebooting system"
    echo " $(basename "${0}") will reboot the system in ${AUTO_REBOOT_TIMEOUT} seconds... "
    sleep "${AUTO_REBOOT_TIMEOUT}"
    ${REBOOT}
  fi
}

#
# Check if you can sudo
#
function check_root_priv() {
  # Don't ask for root in dry run
  # shellcheck disable=SC2154
  [[ "${FLAGS_dryrun}" == "${FLAGS_TRUE}" ]] && return

  # Checking if the user has run the script with "sudo" or not
  if [[ $EUID -ne 0 ]]; then
    echo "${RED}${BOLD}Error: ${BOLDOFF} Application needs admin access.${BOLDOFF}" 1>&2
    echo "Please run the application as admin (using 'sudo' or 'su')" 1>&2
    exit 1
  fi
}

#
# Disallow/allow power management and reboots
#
function disable_reboot() {
  local pkla_file="${share_dir}/99-ucaresystem-temporary.pkla"
  local dest="/etc/polkit-1/localauthority/90-mandatory.d/99-ucaresystem-temporary.pkla"
  sudo cp "$pkla_file" "$dest"
}

function enable_reboot() {
  local dest="/etc/polkit-1/localauthority/90-mandatory.d/99-ucaresystem-temporary.pkla"
  [[ -f "${dest}" ]] &&  "${EXEC}" sudo rm "$dest"
}

#
# Set executable
# usage set_executable VAR path type required|optional|fixed
#
function set_executable() {
  local var_name=${1:-}
  local default_path=${2:-}
  local type=${3:-type }

  path_value="$default_path"
  case "$type" in
  "fixed")
    must_exist=true
    ;;
  "required")
    [[ -n ${!var_name} ]] && path_value="${!var_name}"
    must_exist=true
    ;;
  "optional")
    [[ -n ${!var_name} ]] && path_value="${!var_name}"
    must_exist=false
    ;;
  esac

  path_valid=false
  [[ -x "$path_value" ]] && path_valid=true

  # shellcheck disable=SC2229
  IFS= read -r "$var_name" <<<"$path_value"
  IFS= read -r "HAVE_$var_name" <<<"${path_valid}"

  #  echo "must_exist: $must_exist, path_valid: $path_valid"
  [[ $must_exist == true && $path_valid == false ]] && return 1
  return 0
}

#
# Load the config file safely
#
function load_config_file() {
  CONFIG_FILE=${CONFIG_FILE:-/etc/ucaresystem.conf}

  if [[ ! "$CONFIG_FILE" == "${DEFAULT_VALUES[CONFIG_FILE]}" ]]; then
    # Config file request must exists!
    if [ ! -r "$CONFIG_FILE" ]; then
      echo "${RED}Error${NORMAL}: Configuration file '$CONFIG_FILE' does not exits or it is not readable."
      exit 1
    fi
  fi

  if [ -r "$CONFIG_FILE" ]; then
    vars_file=$(mktemp "${TMPDIR:-/tmp/}ucaresystem-vars-XXX.sh")
    /usr/bin/awk -F= '/^([A-Z_]*)=(.*)$/ {printf "declare -g %s\n", $0}' "$CONFIG_FILE" >"${vars_file}"
    # shellcheck disable=SC1090
    source "${vars_file}"
    rm "${vars_file}"
  fi

  # Configuration variables and default values
  for v in "${!DEFAULT_VALUES[@]}"; do
    # shellcheck disable=SC2229
    [[ -z ${!v} ]] && IFS= read -r "${v}" <<<"${DEFAULT_VALUES[$v]}"
    [[ ${!v} == "--empty--" ]] && eval "unset ${v}"
  done

  # Programs used
  for i in "${!EXECUTABLES[@]}"; do
    IFS=':' read -ra split <<<"${EXECUTABLES[$i]}"
    set_executable "$i" "${split[0]}" "${split[1]}"
    local ok_var="HAVE_${i}"
    if [[ "${split[1]}" != "optional" && "${!ok_var}" == "false" ]]; then
      echo "${RED}Bad config option${NORMAL}: '${GREEN}$i${NORMAL}' missing executable '${GREEN}${!i}${NORMAL}'"
      exit 2
    fi
  done
}

#
# Setup colors
#
function setup_colors() {
  RED=""
  GREEN=""
  NORMAL=""
  BOLD=""
  BOLDOFF=""

  NO_COLOR=${NO_COLOR:-}
  if [[ -z "${NO_COLOR}" ]]; then
    if test -n "$TERM" && test "$TERM" != "dumb"; then
      RED=$(tput setaf 1)
      GREEN=$(tput setaf 2)
      NORMAL=$(tput setaf 7)
      BOLD=$(tput bold)
      BOLDOFF=$(tput sgr0)
    fi
  fi
}

#
# Trap Handler
#
function trap_handler() {
  #Remove systemd file (if its there you can sudo)
  local dest="/etc/polkit-1/localauthority/90-mandatory.d/99-ucaresystem-temporary.pkla"
  [[ -f "${dest}" ]] && sudo rm "$dest"

  header_text "Program interrupt."
  echo "  The program have stop before finished."
  echo "  Your system maybe in an incomplete state."
  echo "  You may need to do:"
  echo "     sudo apt update && sudo apt install -f"

  close_window "Trapped!" 1
}


#
# Runner(s) to support dry run
#
function no_opp() {
  echo + "$@"
}
function yes_opp() {
  #TODO: propagate $?
  set -x
  "$@"
  { set +x; } 2>/dev/null
}
function run_opp() {
  #TODO: propagate $?
  "$@"
  return $?
}

#
# Simulation message
#
function simulation_message {
  # shellcheck disable=SC2154
  # shellcheck disable=SC2034
  if [[  "${FLAGS_dryrun}" == "${FLAGS_TRUE}" ]]; then
    echo "${RED}NOTE${NORMAL}: This is only a simulation!"
    echo "    Nothing will changed in your system."
    echo "    ${GREEN}ucaresystem${NORMAL} may needs root privileges for real execution."
    echo
  fi
}

#
# Timed messages
# repeat_message var_name "The gun is loaded. Fire! in " 3
function repeat_message() {
  local -n  __resultvar=$1
  local message=${2:-}
  local timer=${3:-10}
  function overwrite() { echo -e "\r\033[1A\033[0K$*"; }

  echo
  while [[ $timer != 0 ]]; do
    overwrite "$message ${timer} ..."
    # shellcheck disable=SC2034
    read -t 1 -n 1 -r -s __resultvar
    [[ ! $? == 142 ]] && return
    timer="$((timer - 1))"
  done
}

function close_window() {
  reason=${1:-Done}
  status=${2:0}
  header_text "$reason"

  # Eterm have a nice hold logic
  # shellcheck disable=SC2086
  [[ "$TERM" == "Eterm" ]] && exit $status

  # shellcheck disable=SC2154
  [[ "${FLAGS_wait_gui}" == "${FLAGS_TRUE}" ]] && repeat_message dummy "Press any key to close window. Auto close in " 120
  # shellcheck disable=SC2086
  exit $status
}

#
# Show the configuration
#
function show_config() {
  echo "${FLAGS_HELP}"

  if [[ $1 == a* ]] || [[ $1 == s* ]]; then
    echo
    echo "*** Settings ***"
    for v in "${!DEFAULT_VALUES[@]}"; do
      echo -n "${GREEN}$v${NORMAL}=${!v}"
      [[ ! "${!v}" == "${DEFAULT_VALUES[$v]}" ]] && echo -n " ${GREEN}--Changed--${NORMAL}"
      echo
    done
  fi

  if [[ $1 == a* ]] || [[ $1 == p* ]]; then
    echo
    echo "*** Programs used ***"
    for prog in "${!EXECUTABLES[@]}"; do
      IFS=':' read -ra split <<<"${EXECUTABLES[$prog]}"
      local default_path="${split[0]}"
      local category="${split[1]}"
      declare -A category_labels
      category_labels=([fixed]='F' [required]='R' [optional]='~')

      echo -n "${category_labels[$category]}:"
      echo -n "${GREEN}$prog${NORMAL}=${!prog}"
      ok_var="HAVE_${prog}"
      [[ ! "${!prog}" == "${default_path}" ]] && echo -n " ${GREEN}--Changed--${NORMAL}"
      [[ "${!ok_var}" == "false" && ! ${!prog} == "-" ]] && echo -n " ${RED}--BAD EXECUTABLE--${NORMAL}"
      [[ "${!ok_var}" == "false" && ${!prog} == "-" ]] && echo -n "${GREEN}-NOT SET--${NORMAL}"
      echo
    done

    echo
    echo "Please do not worry about --BAD EXECUTABLE-- if you haven't change them in your config file."
  fi
}

#
# Display version
#
function show_version() {
  echo "${UCARE_VERSION}"
}

#
# Common cmd options
#
function common_cmd_options() {

  # shellcheck disable=SC2154
  if [[ "${FLAGS_show_config}" == "${FLAGS_TRUE}" ]]; then
    load_config_file
  fi

  # shellcheck disable=SC2154
  # shellcheck disable=SC2034
  [[  "${FLAGS_dryrun}" == "${FLAGS_TRUE}" ]] && EXEC="no_opp"

  # shellcheck disable=SC2154
  [[ ! ${FLAGS_config} == "<file>" ]] && CONFIG_FILE="${FLAGS_config}"

  # shellcheck disable=SC2154
  # shellcheck disable=SC2034
  [[  "${FLAGS_disable_timeshift}" == "${FLAGS_TRUE}" ]] && ENABLE_TIMESHIFT="false"

  # shellcheck disable=SC2154
  if [[ "${FLAGS_version}" == "${FLAGS_TRUE}" ]]; then
    show_version
    exit 0
  fi

  #TODO: Hook for extension

  # shellcheck disable=SC2154
  if [[ "${FLAGS_show_config}" == "${FLAGS_TRUE}" ]]; then
    load_config_file
    show_config "${FLAGS_config_sections}"
    exit 0
  fi

}

#
# Flags for all suite
#
function setup_common_flags() {
  # Common Flags
  DEFINE_boolean 'dryrun' false 'Do not change anything in system' 'd'
  DEFINE_boolean 'disable-timeshift' false 'Disable timeshift'

  DEFINE_string 'config' "<file>" 'Specify a config file'
  DEFINE_boolean 'show-config' false 'Show configuration'
  DEFINE_string 'config-sections' "all" 'Configuration sections to show'

  DEFINE_boolean 'version' false 'Show program version' 'v'
}
#
# Flags for 'ucaresystem-cli'
#
function setup_ucaresystem_cli_flags() {
  DEFINE_string 'mode' "" 'Specify mode of operation (maintain,clean,info,dist-upgrade, timeshift)'
  DEFINE_boolean 'maintain' false 'Maintain system' 'm'
  DEFINE_boolean 'clean' false 'Reclaim some disk space' 'c'
  DEFINE_boolean 'sysinfo' false 'Get information about eol status' 's'
  DEFINE_boolean 'timeshift' false 'Make a snapshot with timeshift' 't'
  DEFINE_boolean 'dist-upgrade' false 'Update distribution'
  DEFINE_boolean 'banner' true 'Show banner'
  DEFINE_boolean 'ask-confirm' true 'Ask confirm'
  DEFINE_boolean 'wait-gui' false 'Wait to close the window'
}

#
# Flags for 'ucaresystem'
#
function setup_ucaresystem_flags() {
  DEFINE_string 'runner' "cli" 'Specify which version (cli,gui)'
  setup_ucaresystem_cli_flags
}


setup_colors
# Setup HELP SYSTEM
# shellcheck disable=SC2034
read -r -d '' FLAGS_HELP <<EOHELP
${GREEN}ucaresystem${NORMAL} : (config) All-in-one system update and maintenance tool
  ucaresystem version ${UCARE_VERSION}.
EOHELP
# shellcheck disable=SC2034
FLAGS_FOOTER="Type 'man ucaresystem' for more info."

#
# Standalone
#
if [[ "${FUNCNAME[0]}" != source ]]; then
read -r -d '' FLAGS_HELP <<EOHELP
${GREEN}ucaresystem${NORMAL} : (config) All-in-one system update and maintenance tool
  Displays the configuration values. No options
  ucaresystem version ${UCARE_VERSION}.
EOHELP

  trap trap_handler 1 2 3 6

  # parse the command-line
  setup_common_flags
  FLAGS "$@" || exit $?
  eval set -- "${FLAGS_ARGV}"

  common_cmd_options
  load_config_file

  show_config "all"
fi
