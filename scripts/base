#!/usr/bin/env bash
#
#    ucaresystem - All-in-one system update and maintenance tool
#    Copyright (C) 2009-2020 Salih Emin <salih@utappia.org>
#
#    Authors: Salih Emin <salih@utappia.org>
#             Ioannis Tsagkatakis <tsagatakis@protonmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu
## Ensure this file can only be sourced once
set +u
if [[ "${FUNCNAME[0]}" != source ]]; then
  echo "This file can only be source"
  exit 1
fi
if [[ -n ${base_loaded} ]]; then
  echo "Warning: This file can only be sourced once"
  return 1
fi
base_loaded=true
set -u

#
# Config file
#
if [ -x "/etc/ucaresystem.conf" ]; then
  source /etc/ucaresystem.conf
fi

#
# Colors
#
RED=""
GREEN=""
NORMAL=""
BOLD=""
BOLDOFF=""

set +u
if [[ -z "${NO_COLOR}" ]]; then
  if test -n "$TERM" && test "$TERM" != "dumb"; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    NORMAL=$(tput setaf 7)
    BOLD=$(tput bold)
    BOLDOFF=$(tput sgr0)
  fi
fi
set -u

# Configuration variables and default values
WAIT_ACTION=${WAIT_ACTION:=0}
KEEP_KERNELS=${KEEP_KERNELS:=2}
SHOW_BANNER=${SHOWBANNER:=true}
DEFAULT_MODE=${DEFAULT_MODE:=maintain}
AUTO_REBOOT=${AUTO_REBOOT:=false}
AUTO_REBOOT_TIMEOUT=${AUTO_REBOOT_TIMEOUT:=10}
ASK_CONFIRM=${ASK_CONFIRM:=true}
ENABLE_TIMESHIFT=${ENABLE_TIMESHIFT:=auto}

EXEC=""
DO_WAIT=false

#
# Programs used
# So user can change them in the config file
#

SUDO=${SUDO:=/usr/bin/sudo}
DEBORPHAN=${DEBORPHAN:=/usr/bin/deborphan}
UPDATE_TOOL=${UPDATE_TOOL:=/usr/bin/do-release-upgrade}
LSB_RELEASE=${LSB_RELEASE:=/usr/bin/lsb_release}
REBOOT=${REBOOT:=/sbin/reboot}
LOCALE=${LOCALE:=/usr/bin/locale}
SED=${SED:=/bin/sed}
TIMESHIFT=${TIMESHIFT:=/usr/bin/timeshift}
AWK=${AWK:=/usr/bin/awk}

# use apt or apt-get
if [ -x "/usr/bin/apt" ]; then
  APT="/usr/bin/apt"
else
  APT="/usr/bin/apt-get"
fi

# Distro info tool
distribution_id=$(${LSB_RELEASE} --id | cut -f2)
case "${distribution_id}" in
  "Debian") DISTRO_INFO="/usr/bin/debian-distro-info" ;;
  "Ubuntu") DISTRO_INFO="/usr/bin/ubuntu-distro-info" ;;
esac

set -u

#
# Display a header text
#
function header_text() {
  echo -e "${GREEN}${BOLD}***${BOLDOFF} ${1}${NORMAL}"
}

#
# Ask for yes/no (localized)
#
function ask_yesno() {
  local prompt=$1
  set -- $(${LOCALE} LC_MESSAGES)
  local yesptrn="$1"
  local noptrn="$2"
  local yesword="$3"
  local noword="$4"
  while true; do
    read -rp "${prompt} (${yesword},yes / ${noword},no)? " yn
    case $yn in
    ${yesptrn##^})
      response="yes"
      break
      ;;
    ${noptrn##^})
      response="no"
      break
      ;;
    *) echo "${prompt} ${yesword},yes / ${noword},no." ;;
    esac
  done
}


#
# Check if reboot is required
#
function check_reboot() {
  header_text "Checking to see if a reboot is required "
  ## Check to see if a reboot is required
  if [ -f /var/run/reboot-required ]; then
    echo
    echo "${BOLD}${RED}* * * * * * * * * * * * * * * * * *"
    echo "*                                 *"
    echo "* Consider rebooting your system  *"
    echo "* to finish applying updates      *"
    echo "*                                 *"
    echo "* * * * * * * * * * * * * * * * * *${BOLDOFF}${NORMAL}"
    echo
  fi

  if [ "$AUTO_REBOOT" == true ]; then
    header_text "Rebooting system"
    echo " $(basename "${0}") will reboot the system in ${AUTO_REBOOT_TIMEOUT} seconds... "
    sleep ${AUTO_REBOOT_TIMEOUT}
    ${REBOOT}
  fi
}


#
# Check if you can sudo
#
function check_root_priv() {
  # Checking if the user has run the script with "sudo" or not
  if [[ $EUID -ne 0 ]]; then
    echo  "${RED}${BOLD}Error: ${BOLDOFF} Application needs admin access.${BOLDOFF}" 1>&2
    echo  "Please run the application as admin (using 'sudo' or 'su')" 1>&2
    exit 1
  fi
}
