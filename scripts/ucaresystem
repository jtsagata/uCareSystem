#!/bin/bash

set -e
set -u
#
#
#_______________________________________________
#THIS IS THE Terminal Version of uCareSystem
#_______________________________________________
# Name   : uCareSystem Core
# Licence: GPL3 (http://www.gnu.org/licenses/gpl.html)
# Author : Salih Emin
# WebSite: http://utappia.org
# Email  : salih-(at)-utappia.org
# Date   : 29-02-2020 (first release 19-02-2009)
# Version: 4.5.0
# System : Debian Linux and Ubuntu Linux
# Description:
#This simple script will automatically refresh your package list, download and install
#updates (if there are any),
#remove any remaining packages and configuration files without interference.
#
## Script starts here

#Variables
DIST_CODENAME=$(lsb_release --codename | cut -f2)
DATE=$(date +%F_%T)
UCARE_VERSION="4.5.0"
SLEEP=10
SLEEP_AFTER_ACTION=0
KEEP_REMOVE_OLD_KERNELS=2

#EXEC=""

if test -n "$TERM" && test "$TERM" != "dumb"; then
#    BLACK=$(tput setaf 0)
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
#    YELLOW=$(tput setaf 3)
#    BLUE=$(tput setaf 4)
#    MAGENTA=$(tput setaf 5)
#    CYAN=$(tput setaf 6)
    NORMAL=$(tput setaf 7)
    BOLD=$(tput bold)
    BOLDOFF=$(tput sgr0)
fi

function CHECK_SUDO {
	# Checking if the user has run the script with "sudo" or not
	if [[ $EUID -ne 0 ]] ; then
	    echo "${RED}${BOLD}uCareSystem Core must be run as root or with sudo.${BOLDOFF}${NORMAL}" 1>&2
	    exit 1
	fi
}

function WELCOME_SCREEN {
	clear
	echo "_______________________________________________________"
	echo "                                                       "
	echo "            ${GREEN}uCareSystem Core ${UCARE_VERSION}${NORMAL}            "
	echo "            ${GREEN}~~~~~~~~~~~~~~~~~~~~~~~${NORMAL}                      "
	echo "                                                       "
	echo " Welcome to all-in-one System Update and maintenance   "
	echo " assistant app.                                        "
	echo "                                                       "
	echo "                                                       "
	echo " This simple script will automatically         	     "
	echo " refresh your packagelist, download and                "
	echo " install updates (if there are any), remove any old    "
	echo " kernels, obsolete packages and configuration files    "
	echo " to free up disk space, without any need of user       "
	echo " interference                                         " 
	echo "                   				                     "
	echo " If youâ€™ve found it useful and saved you time and you  "
	echo " think it is worth of your support, you can make a     "
	echo " donation via PayPal by clicking on the following:     "
	echo "                                                       "
	echo "           ${GREEN}https://www.paypal.me/cerebrux${NORMAL}              "
	echo "_______________________________________________________"
	echo

  echo "${GREEN}Actions:${NORMAL}"
  if [ "$DO_MAINTENACE" == true ] ; then
    echo "** Update packages and reclaim space"
  fi

  if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ] ; then
    echo "** Update next release"
  fi

  if [ "$DO_UPGRADE_TO_DEVEL_RELEASE" == true ] ; then
    echo "** Update to development release"
  fi

  if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ] ; then
    echo "** Update to next release"
  fi

  if [ "$DO_UPGRADE_EOL_TO_NEXT" == true ] ; then
    echo "** Update to eol release"
  fi

  if [ "$DO_REMOVE_KERNELS" == true ] ; then
    echo "** Remove old kernels"
  fi

	echo
	echo " uCareSystem Core will start in $SLEEP seconds... "


	sleep $SLEEP
}

function BANNER {
	title=$1
#  echo
#	echo "${GREEN}##################################################"
#	printf "%*s\n" $(((${#title}+50)/2)) "$title"
#	echo "##################################################${NORMAL}"
#	echo
  echo -e "${GREEN}${BOLD}***${BOLDOFF} ${title}${NORMAL}"
}

function REMOVE_OLD_KERNELS {
  CHECK_SUDO
  BANNER "Remove old kernels"
  ${EXEC} remove-old-kernels --keep ${KEEP_REMOVE_OLD_KERNELS}
	BANNER "Finished Remove old kernels"
}

function MAINTENACE {
  CHECK_SUDO
	BANNER "Started"

	## Updates package lists
	BANNER "Updating package lists"
	${EXEC} sudo apt update;
	BANNER "Finished updating package lists"
	sleep ${SLEEP_AFTER_ACTION}

	## Updates packages and libraries
	BANNER "Updating packages and system libraries"
	${EXEC} sudo apt full-upgrade -y;
	BANNER "Finished updating packages and system libraries"
  sleep ${SLEEP_AFTER_ACTION}

	## Removes unneeded packages
	BANNER "Removing unneeded packages"
	${EXEC} sudo apt-get -y --purge autoremove; # Debian Jessie uses old apt. So
	BANNER "Finished removing unneeded packages"
  sleep ${SLEEP_AFTER_ACTION}

	## Removes unused config files
	BANNER "Removing unused config files"
	set +e
	${EXEC} sudo deborphan -n --find-config | xargs sudo apt-get -y --purge autoremove;
	set -e
	BANNER "Finished removing unused config files"
  sleep ${SLEEP_AFTER_ACTION}

	## Removes package files that can no longer be downloaded and everything except
	# the lock file in /var/cache/apt/archives, including directories.
	BANNER "Cleaned downloaded temporary packages"
	${EXEC} sudo apt-get -y autoclean; sudo apt-get -y clean;
	BANNER "Finish cleaned downloaded temporary packages"
  sleep ${SLEEP_AFTER_ACTION}

	BANNER "Checking to see if a reboot is required "
	## Check to see if a reboot is required
	if [ -f /var/run/reboot-required ]; then
 		echo
  	echo "${BOLD}${RED}* * * * * * * * * * * * * * * * * *"
 		echo "*                                 *"
 		echo "* Consider rebooting your system  *"
  	echo "* to finish applying updates      *"
  	echo "*                                 *"
  	echo "* * * * * * * * * * * * * * * * * *${BOLDOFF}${NORMAL}"
  	echo
	fi


}

function UPGRADE_EOL_TO_NEXT {
  CHECK_SUDO
  BANNER "Upgrade to EOL"
  ${EXEC} "/etc/apt/sources.list" "/etc/apt/sources.eol_${DATE}"
  if [ "$EXEC" == "echo" ] ; then
    echo "...skiping updating /etc/apt/sources.list"
  else
    BANNER "Updating /etc/apt/sources.list"
cat <<EOT > /etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-security main restricted universe multiverse

EOT
  fi

  ${EXEC} sudo apt-get install update-manager-core
  ${EXEC} sudo apt-get -y dist-upgrade
  ${EXEC} sudo do-release-upgrade
  BANNER "Done upgrade to EOL"
	sleep ${SLEEP_AFTER_ACTION}
}

function UPGRADE_TO_NEXT_RELEASE {
  CHECK_SUDO
	BANNER "Upgrade to next Release"
	${EXEC} do-release-upgrade
	BANNER "Done upgrade to next Release"
	sleep ${SLEEP_AFTER_ACTION}
}

function UPGRADE_TO_DEVEL_RELEASE {
  CHECK_SUDO
	${EXEC} do-release-upgrade -d
	BANNER "Done upgrade to next Release"
	sleep ${SLEEP_AFTER_ACTION}
}

function SHOW_HELP {
	cat << EOF
	
				uCareSystem Core
				    ~ $UCARE_VERSION ~
		     All-in-one system update and maintenance app

	Usage: sudo ucaresystem-core <parameter> 
	
	If no parameter is specified, it will just do the regular
	maintenance:
	
	 * Updates the list of available packages
	 * Downloads and installs the available updates
	 * Checks if there are older Linux kernels on the system and removes
	   them. However it keeps the current and one previous version of 
	   the kernel.
	 * Cleans the cache of the downloaded packages
	 * Removes obsolete packages
	 * Removes orphan packets
	 * Deletes package configuration files from packages that have been
	   uninstalled by you.
	
	Parameter:	 
		 -h          display this help and exit
		 
		 -u          Upgrade to the next release. Note: If you use a
		             regular release it will upgrade to the next one. If
		             you are on a LTS version, it will upgrade only to 
		             the next LTS.
		             
		 -d          Upgrade to the next development release

		 -eol        CAUTION: Do not use this if your Ubuntu has not 
			     reached its End of life support.
				    Check https://wiki.ubuntu.com/Releases
			     This option is for Ubuntu releases that have
			     reached their EOL and the user wants to upgrade
			     it to the next supported version.

EOF
}

function GOODBYE {
	## End of script
	BANNER "Done"
}

##
## The main process starts here
##

DO_WELCOME_SCREEN=true
DO_REMOVE_KERNELS=true
DO_SHOW_HELP=false
DO_MAINTENACE=true
DO_UPGRADE_TO_NEXT_RELEASE=false
DO_UPGRADE_TO_DEVEL_RELEASE=false
DO_UPGRADE_EOL_TO_NEXT=false
DO_WAIT=false

ARGS=$(getopt -o hnskudew --long help,dryrun,skip,nokernel,upgrade,development,eol,wait -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
    -h | --help )        DO_SHOW_HELP=true; shift ;;
    -n | --dryrun )      EXEC="echo"; shift ;;
    -s | --skip )        DO_WELCOME_SCREEN=false; shift ;;
    -k | --nokernel )    DO_REMOVE_KERNELS=false; shift ;;
    -u | --upgrade )     DO_UPGRADE_TO_NEXT_RELEASE=true; shift ;;
    -d | --development ) DO_UPGRADE_TO_DEVEL_RELEASE=true; shift ;;
    -e | --eol )         DO_UPGRADE_EOL_TO_NEXT=true; shift ;;
    -w | --wait )        DO_WAIT=true; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ "$DO_SHOW_HELP" == true ] ; then
  SHOW_HELP
  exit
fi

if [ "$DO_WELCOME_SCREEN" == true ] ; then
  WELCOME_SCREEN
fi

if [ "$DO_MAINTENACE" == true ] ; then
  MAINTENACE
fi

if [ "$DO_REMOVE_KERNELS" == true ] ; then
  REMOVE_OLD_KERNELS
fi

if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ] ; then
  UPGRADE_TO_NEXT_RELEASE
fi

if [ "$DO_UPGRADE_TO_DEVEL_RELEASE" == true ] ; then
  UPGRADE_TO_DEVEL_RELEASE
fi

if [ "$DO_UPGRADE_EOL_TO_NEXT" == true ] ; then
  UPGRADE_EOL_TO_NEXT
fi

GOODBYE

if [ "$DO_WAIT" == true ] ; then
  echo
  read -r -p "Press enter to close the window" response
fi