#!/bin/bash
#
#    ucaresystem - All-in-one system update and maintenance tool
#    Copyright (C) 2009-2020 Salih Emin <salih@utappia.org>
#
#    Authors: Salih Emin <salih@utappia.org>
#             Ioannis Tsagkatakis <tsagatakis@protonmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu


codename=$(lsb_release --codename | cut -f2)
UCARE_VERSION="4.5.0"
#Config file
if [ -x "/etc/ucaresystem.conf" ]; then
  source /etc/ucaresystem.conf
fi
#Variables
WAIT_START=${WAIT_START:=10}
WAIT_ACTION=${WAIT_ACTION:=0}
KEEP_KERNELS=${KEEP_KERNELS:=2}
SHOW_BANNER=${SHOWBANNER:=true}
DEFAULT_MODE=${DEFAULT_MODE:=maintain}
EXEC=""

## Colors
RED=""
GREEN=""
NORMAL=""
BOLD=""
BOLDOFF=""

set +u
if [[ -z "${NO_COLOR}" ]]; then
  if test -n "$TERM" && test "$TERM" != "dumb"; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    NORMAL=$(tput setaf 7)
    BOLD=$(tput bold)
    BOLDOFF=$(tput sgr0)
  fi
fi
set -u


# Programs used
SUDO="/usr/bin/sudo"
APT_GET="/usr/bin/apt-get"
DEBORPHAN="/usr/bin/deborphan"
UPDATE_TOOL="/usr/bin/do-release-upgrade"
REMOVE_KERNEL_TOOL="/usr/bin/remove-old-kernels"
LSB_RELEASE="/usr/bin/lsb_release"

trap trap_handler 1 2 3 6

function trap_handler {
  banner "Program interrupt."
  echo "  The program have stop before finished. Your system maybe in an incomplete state."
  echo "  You may need to do:"
  echo "     sudo ap update && sudo apt install -f"
  exit 1
}

function banner() {
  echo -e "${GREEN}${BOLD}***${BOLDOFF} ${1}${NORMAL}"
}

function check_eol {
  distribution_id=$(lsb_release --id | cut -f2)
  codename=$(lsb_release --codename | cut -f2)

#  distribution_id="Ubuntu" && codename="focal"

  valid_ids=("Debian" "Ubuntu")
  if [[ ! "${valid_ids[*]}" == *"${distribution_id}"* ]]; then
    banner "Your distribution '${distribution_id}', codename:'${codename}' is unsupported."
    exit
  fi

  case "${distribution_id}" in
    "Debian" )  DISTRO_INFO="/usr/bin/debian-distro-info" ;;
    "Ubuntu" )  DISTRO_INFO="/usr/bin/ubuntu-distro-info" ;;
  esac

  supported_distro=$(${DISTRO_INFO} --supported)
  days=$(${DISTRO_INFO} --series=${codename} --days)

  if [[ "${supported_distro[*]}" == *"${codename}"* ]]; then
    banner "Your distribution '${GREEN}${distribution_id}${NORMAL}', codename:'${GREEN}${codename}${NORMAL}' is not at eol."
    if [ ! "${days}" == "(unknown)" ]; then
      if [[ "${days}" == *"-"* ]]; then
        banner "The was a new distribution version before ${days//-/} days. Consider an upgrade."
      else
        banner "Expect a new version of your distribution in ${days} days."
      fi
    fi
    return
  else
    banner "Your distribution '${distribution_id}', codename:'${codename}' is reach the end of support"
    echo  "  The end of support was before ${days//-/} days."
    echo  "  Please upgrade your distribution to a latest release!"
    echo  "  Try run: $(basename "${0}") --upgrade"
    exit
  fi
}

function check_root_priv {
  # Checking if the user has run the script with "sudo" or not
  if [[ $EUID -ne 0 ]]; then
    echo -ne "${RED}${BOLD}Error: ${BOLDOFF} '$0'" 1>&2
    echo -ne " ${BOLD}must run with root user privileges.${BOLDOFF}" 1>&2
    echo -ne " ${BOLD}consider running it with 'sudo' ${BOLDOFF}" 1>&2
    printf "\n\n"
    exit 1
  fi
}

function welcome_screen() {
  clear
  echo "_______________________________________________________"
  echo "                                                       "
  echo "            ${GREEN}uCareSystem Core ${UCARE_VERSION}${NORMAL}            "
  echo "            ${GREEN}~~~~~~~~~~~~~~~~~~~~~~~${NORMAL}                      "
  echo "                                                       "
  echo " Welcome to all-in-one System Update and maintenance   "
  echo " assistant app.                                        "
  echo "                                                       "
  echo "                                                       "
  echo " This simple script will automatically         	     "
  echo " refresh your packagelist, download and                "
  echo " install updates (if there are any), remove any old    "
  echo " kernels, obsolete packages and configuration files    "
  echo " to free up disk space, without any need of user       "
  echo " interference                                         "
  echo "                   				                     "
  echo " If youâ€™ve found it useful and saved you time and you  "
  echo " think it is worth of your support, you can make a     "
  echo " donation via PayPal by clicking on the following:     "
  echo "                                                       "
  echo "           ${GREEN}https://www.paypal.me/cerebrux${NORMAL}              "
  echo "_______________________________________________________"
  echo
  echo " uCareSystem Core will start in $WAIT_START seconds... "

  sleep $WAIT_START
}



function action_kernels() {
  check_root_priv
  banner "Remove old kernels"
  set -x
  ${EXEC} ${REMOVE_KERNEL_TOOL} --keep ${KEEP_KERNELS}
  { set +x; } 2>/dev/null
}

function action_maintain() {
  check_root_priv
  banner "Start Maintain actions"

  ## Updates package lists
  banner "Updating package lists"
  set -x
  ${EXEC} ${SUDO} ${APT_GET} update
  { set +x; } 2>/dev/null
  sleep ${WAIT_ACTION}

  ## Updates packages and libraries
  banner "Updating packages and system libraries"
  set -x
  ${EXEC} ${SUDO} ${APT_GET} full-upgrade -y
  { set +x; } 2>/dev/null
  sleep ${WAIT_ACTION}

  ## Removes unneeded packages
  banner "Removing unneeded packages"
  set -x
  ${EXEC} ${SUDO} ${APT_GET} -y --purge autoremove # Debian Jessie uses old apt. So
  { set +x; } 2>/dev/null
  sleep ${WAIT_ACTION}

  ## Removes unused config files
  banner "Removing unused config files"
  set -x
  ${EXEC} ${SUDO} ${DEBORPHAN} -n --find-config |  ${EXEC}  xargs ${SUDO} ${APT_GET} -y --purge autoremove
  { set +x; } 2>/dev/null
  sleep ${WAIT_ACTION}

  ## Removes package files that can no longer be downloaded and everything except
  # the lock file in /var/cache/apt/archives, including directories.
  banner "Cleaned downloaded temporary packages"
  set -x
  ${EXEC} ${SUDO} ${APT_GET} -y autoclean
  ${EXEC} ${SUDO} ${APT_GET} -y clean
  { set +x; } 2>/dev/null
  banner "Finish cleaned Maintain actions"
  sleep ${WAIT_ACTION}
}

function check_reboot() {
  banner "Checking to see if a reboot is required "
  ## Check to see if a reboot is required
  if [ -f /var/run/reboot-required ]; then
    echo
    echo "${BOLD}${RED}* * * * * * * * * * * * * * * * * *"
    echo "*                                 *"
    echo "* Consider rebooting your system  *"
    echo "* to finish applying updates      *"
    echo "*                                 *"
    echo "* * * * * * * * * * * * * * * * * *${BOLDOFF}${NORMAL}"
    echo
  fi
}

function action_upgrade_EOL() {
  check_root_priv
  curr_date=$(date +%F_%T)
  banner "Upgrade to EOL"
  ${EXEC} "/etc/apt/sources.list" "/etc/apt/sources.eol_${curr_date}"
  if [ "$EXEC" == "echo" ]; then
    echo "...skiping updating /etc/apt/sources.list"
  else
    banner "Updating /etc/apt/sources.list"
    cat <<EOT >/etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $codename main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $codename-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $codename-security main restricted universe multiverse

EOT
  fi

  ${EXEC} ${SUDO} ${APT_GET} install update-manager-core
  ${EXEC} ${SUDO} ${APT_GET} -y dist-upgrade
  ${EXEC} ${SUDO} ${UPDATE_TOOL}
  banner "Done upgrade to EOL"
  sleep ${WAIT_ACTION}
}

function action_upgrade_next() {
  check_root_priv
  banner "Upgrade to next Release"
  ${EXEC} ${UPDATE_TOOL}
  banner "Done upgrade to next Release"
  sleep ${WAIT_ACTION}
}

function action_upgrade_devel() {
  check_root_priv
  ${EXEC} ${UPDATE_TOOL} -d
  banner "Done upgrade to next Release"
  sleep ${WAIT_ACTION}
}

function action_help() {
  cat <<EOF
	
uCareSystem Core $UCARE_VERSION : All-in-one system update and maintenance tool

Usage:
  sudo ucaresystem [--mode=name] [mode-options]
  ucaresystem --help|--version

See man page for more info

OPTIONS
  -m name, --mode=name
    Choose mode of operation. Valid modes are "maintain", "upgrade","cleanup"
    If no option is given "maintain" mode will be used (configurable)

  -n, --dyrun
    Show only the commands, but do not modify the system

  -h, --help
    Display this help text

  -v, --version
    Display program version and exits

  -s, --skip
    Do not show the welcome banner, and do not pause.

  -w, --wait
          Press ENTER to end the program. For the "gui" version

MAINTAIN OPTIONS
  -n, --nokernel
    Do not remove old kernels.

   -u, --upgrade
          Upgrade to next available release

   -d, --development
          Upgrade to a development release. For testers and developers only

   -e, --eol
          If your Ubuntu (and official flavors) has reached the EOL support you can upgrade to the next supported  release.   This  option  is  for  Ubuntu
          releases that have reached their EOL and the user wants to upgrade it to the next supported version.



   -m, --maintenance
          Do normal maintenance jobs. The default action id no option is given.

EOF
}

##
## The main process starts here
##

DO_WELCOME_SCREEN=true
DO_REMOVE_KERNELS=true
DO_action_help=false
DO_MAINTENACE=true
DO_UPGRADE_TO_NEXT_RELEASE=false
DO_UPGRADE_TO_DEVEL_RELEASE=false
DO_UPGRADE_EOL_TO_NEXT=false
DO_WAIT=false

ARGS=$(getopt -o hnskudewm --long help,dryrun,skip,nokernel,upgrade,development,eol,wait,maintenance -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
  -h | --help)
    DO_action_help=true
    shift
    ;;
  -n | --dryrun)
    EXEC="echo"
    shift
    ;;
  -s | --skip)
    DO_WELCOME_SCREEN=false
    shift
    ;;
  -k | --nokernel)
    DO_REMOVE_KERNELS=false
    shift
    ;;
  -u | --upgrade)
    DO_UPGRADE_TO_NEXT_RELEASE=true
    shift
    ;;
  -d | --development)
    DO_UPGRADE_TO_DEVEL_RELEASE=true
    shift
    ;;
  -e | --eol)
    DO_UPGRADE_EOL_TO_NEXT=true
    shift
    ;;
  -w | --wait)
    DO_WAIT=true
    shift
    ;;
  -m | --maintenance)
    DO_MAINTENACE=true
    shift
    ;;
  --)
    shift
    break
    ;;
  *) break ;;
  esac
done

if [ "$DO_action_help" == true ]; then
  action_help
  exit
fi

if [ "$SHOW_BANNER" == true ]; then
  welcome_screen
fi

if [ "$DO_MAINTENACE" == true ]; then
  action_maintain
fi

if [ "$DO_REMOVE_KERNELS" == true ]; then
  action_kernels
fi

if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ]; then
  action_upgrade_next
fi

if [ "$DO_UPGRADE_TO_DEVEL_RELEASE" == true ]; then
  action_upgrade_devel
fi

if [ "$DO_UPGRADE_EOL_TO_NEXT" == true ]; then
  action_upgrade_EOL
fi

check_reboot
banner "Done"

if [ "$DO_WAIT" == true ]; then
  echo
  read -r -p "Press enter to close the window" response
fi
