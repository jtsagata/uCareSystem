#!/bin/bash
#
#    ucaresystem - All-in-one system update and maintenance tool
#    Copyright (C) 2009-2020 Salih Emin <salih@utappia.org>
#
#    Authors: Salih Emin <salih@utappia.org>
#             Ioannis Tsagkatakis <tsagatakis@protonmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
set -e
set -u

DIST_CODENAME=$(lsb_release --codename | cut -f2)
UCARE_VERSION="4.5.0"
#Config file
if ! [ -x "/etc/ucaresystem.conf" ]; then
  source /etc/ucaresystem.conf
fi
#Variables
WAIT_START=${WAIT_START:=10}
WAIT_ACTION=${WAIT_ACTION:=1}
KEEP_KERNELS=${KEEP_KERNELS:=2}
SHOW_BANNER=${SHOWBANNER:=true}
DEFAULT_MODE=${DEFAULT_MODE:=maintain}


if test -n "$TERM" && test "$TERM" != "dumb"; then
  #    BLACK=$(tput setaf 0)
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  #    YELLOW=$(tput setaf 3)
  #    BLUE=$(tput setaf 4)
  #    MAGENTA=$(tput setaf 5)
  #    CYAN=$(tput setaf 6)
  NORMAL=$(tput setaf 7)
  BOLD=$(tput bold)
  BOLDOFF=$(tput sgr0)
fi

function check_root_priv() {
  # Checking if the user has run the script with "sudo" or not
  if [[ $EUID -ne 0 ]]; then
    echo "${RED}${BOLD}uCareSystem Core must be run as root or with sudo.${BOLDOFF}${NORMAL}" 1>&2
    exit 1
  fi
}

function welcome_screen() {
  clear
  echo "_______________________________________________________"
  echo "                                                       "
  echo "            ${GREEN}uCareSystem Core ${UCARE_VERSION}${NORMAL}            "
  echo "            ${GREEN}~~~~~~~~~~~~~~~~~~~~~~~${NORMAL}                      "
  echo "                                                       "
  echo " Welcome to all-in-one System Update and maintenance   "
  echo " assistant app.                                        "
  echo "                                                       "
  echo "                                                       "
  echo " This simple script will automatically         	     "
  echo " refresh your packagelist, download and                "
  echo " install updates (if there are any), remove any old    "
  echo " kernels, obsolete packages and configuration files    "
  echo " to free up disk space, without any need of user       "
  echo " interference                                         "
  echo "                   				                     "
  echo " If youâ€™ve found it useful and saved you time and you  "
  echo " think it is worth of your support, you can make a     "
  echo " donation via PayPal by clicking on the following:     "
  echo "                                                       "
  echo "           ${GREEN}https://www.paypal.me/cerebrux${NORMAL}              "
  echo "_______________________________________________________"
  echo

  echo "${GREEN}Actions:${NORMAL}"
  if [ "$DO_MAINTENACE" == true ]; then
    echo "** Update packages and reclaim space"
  fi

  if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ]; then
    echo "** Update next release"
  fi

  if [ "$DO_UPGRADE_TO_DEVEL_RELEASE" == true ]; then
    echo "** Update to development release"
  fi

  if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ]; then
    echo "** Update to next release"
  fi

  if [ "$DO_UPGRADE_EOL_TO_NEXT" == true ]; then
    echo "** Update to eol release"
  fi

  if [ "$DO_REMOVE_KERNELS" == true ]; then
    echo "** Remove old kernels"
  fi

  echo
  echo " uCareSystem Core will start in $WAIT_START seconds... "

  sleep $WAIT_START
}

function banner() {
  title=$1
  #  echo
  #	echo "${GREEN}##################################################"
  #	printf "%*s\n" $(((${#title}+50)/2)) "$title"
  #	echo "##################################################${NORMAL}"
  #	echo
  echo -e "${GREEN}${BOLD}***${BOLDOFF} ${title}${NORMAL}"
}

function action_kernels() {
  check_root_priv
  banner "Remove old kernels"
  ${EXEC} remove-old-kernels --keep ${KEEP_KERNELS}
  banner "Finished Remove old kernels"
}

function action_maintain() {
  check_root_priv
  banner "Started"

  ## Updates package lists
  banner "Updating package lists"
  ${EXEC} sudo apt update
  banner "Finished updating package lists"
  sleep ${WAIT_ACTION}

  ## Updates packages and libraries
  banner "Updating packages and system libraries"
  ${EXEC} sudo apt full-upgrade -y
  banner "Finished updating packages and system libraries"
  sleep ${WAIT_ACTION}

  ## Removes unneeded packages
  banner "Removing unneeded packages"
  ${EXEC} sudo apt-get -y --purge autoremove # Debian Jessie uses old apt. So
  banner "Finished removing unneeded packages"
  sleep ${WAIT_ACTION}

  ## Removes unused config files
  banner "Removing unused config files"
  set +e
  ${EXEC} sudo deborphan -n --find-config | xargs sudo apt-get -y --purge autoremove
  set -e
  banner "Finished removing unused config files"
  sleep ${WAIT_ACTION}

  ## Removes package files that can no longer be downloaded and everything except
  # the lock file in /var/cache/apt/archives, including directories.
  banner "Cleaned downloaded temporary packages"
  ${EXEC} sudo apt-get -y autoclean
  sudo apt-get -y clean
  banner "Finish cleaned downloaded temporary packages"
  sleep ${WAIT_ACTION}
}

function check_reboot() {
  banner "Checking to see if a reboot is required "
  ## Check to see if a reboot is required
  if [ -f /var/run/reboot-required ]; then
    echo
    echo "${BOLD}${RED}* * * * * * * * * * * * * * * * * *"
    echo "*                                 *"
    echo "* Consider rebooting your system  *"
    echo "* to finish applying updates      *"
    echo "*                                 *"
    echo "* * * * * * * * * * * * * * * * * *${BOLDOFF}${NORMAL}"
    echo
  fi
}

function action_upgrade_EOL() {
  check_root_priv
  curr_date=$(date +%F_%T)
  banner "Upgrade to EOL"
  ${EXEC} "/etc/apt/sources.list" "/etc/apt/sources.eol_${curr_date}"
  if [ "$EXEC" == "echo" ]; then
    echo "...skiping updating /etc/apt/sources.list"
  else
    banner "Updating /etc/apt/sources.list"
    cat <<EOT >/etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ $DIST_CODENAME-security main restricted universe multiverse

EOT
  fi

  ${EXEC} sudo apt-get install update-manager-core
  ${EXEC} sudo apt-get -y dist-upgrade
  ${EXEC} sudo do-release-upgrade
  banner "Done upgrade to EOL"
  sleep ${WAIT_ACTION}
}

function action_upgrade_next() {
  check_root_priv
  banner "Upgrade to next Release"
  ${EXEC} do-release-upgrade
  banner "Done upgrade to next Release"
  sleep ${WAIT_ACTION}
}

function action_upgrade_devel() {
  check_root_priv
  ${EXEC} do-release-upgrade -d
  banner "Done upgrade to next Release"
  sleep ${WAIT_ACTION}
}

function action_help() {
  cat <<EOF
	
uCareSystem Core $UCARE_VERSION : All-in-one system update and maintenance tool

Usage:
  sudo ucaresystem [--mode=name] [mode-options]
  ucaresystem --help|--version

See man page for more info

OPTIONS
  -m name, --mode=name
    Choose mode of operation. Valid modes are "maintain", "upgrade","cleanup"
    If no option is given "maintain" mode will be used (configurable)

  -n, --dyrun
    Show only the commands, but do not modify the system

  -h, --help
    Display this help text

  -v, --version
    Display program version and exits

  -s, --skip
    Do not show the welcome banner, and do not pause.

  -w, --wait
          Press ENTER to end the program. For the "gui" version

MAINTAIN OPTIONS
  -n, --nokernel
    Do not remove old kernels.

   -u, --upgrade
          Upgrade to next available release

   -d, --development
          Upgrade to a development release. For testers and developers only

   -e, --eol
          If your Ubuntu (and official flavors) has reached the EOL support you can upgrade to the next supported  release.   This  option  is  for  Ubuntu
          releases that have reached their EOL and the user wants to upgrade it to the next supported version.



   -m, --maintenance
          Do normal maintenance jobs. The default action id no option is given.

EOF
}

##
## The main process starts here
##

DO_WELCOME_SCREEN=true
DO_REMOVE_KERNELS=true
DO_action_help=false
DO_MAINTENACE=true
DO_UPGRADE_TO_NEXT_RELEASE=false
DO_UPGRADE_TO_DEVEL_RELEASE=false
DO_UPGRADE_EOL_TO_NEXT=false
DO_WAIT=false

ARGS=$(getopt -o hnskudewm --long help,dryrun,skip,nokernel,upgrade,development,eol,wait,maintenance -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
  -h | --help)
    DO_action_help=true
    shift
    ;;
  -n | --dryrun)
    EXEC="echo"
    shift
    ;;
  -s | --skip)
    DO_WELCOME_SCREEN=false
    shift
    ;;
  -k | --nokernel)
    DO_REMOVE_KERNELS=false
    shift
    ;;
  -u | --upgrade)
    DO_UPGRADE_TO_NEXT_RELEASE=true
    shift
    ;;
  -d | --development)
    DO_UPGRADE_TO_DEVEL_RELEASE=true
    shift
    ;;
  -e | --eol)
    DO_UPGRADE_EOL_TO_NEXT=true
    shift
    ;;
  -w | --wait)
    DO_WAIT=true
    shift
    ;;
  -m | --maintenance)
    DO_MAINTENACE=true
    shift
    ;;
  --)
    shift
    break
    ;;
  *) break ;;
  esac
done

if [ "$DO_action_help" == true ]; then
  action_help
  exit
fi

if [ "SHOW_BANNER" == true ]; then
  welcome_screen
fi

if [ "$DO_MAINTENACE" == true ]; then
  action_maintain
fi

if [ "$DO_REMOVE_KERNELS" == true ]; then
  action_kernels
fi

if [ "$DO_UPGRADE_TO_NEXT_RELEASE" == true ]; then
  action_upgrade_next
fi

if [ "$DO_UPGRADE_TO_DEVEL_RELEASE" == true ]; then
  action_upgrade_devel
fi

if [ "$DO_UPGRADE_EOL_TO_NEXT" == true ]; then
  action_upgrade_EOL
fi

check_reboot
banner "Done"

if [ "$DO_WAIT" == true ]; then
  echo
  read -r -p "Press enter to close the window" response
fi
